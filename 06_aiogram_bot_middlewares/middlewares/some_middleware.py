from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject

# Стоит напомнить, что Update — это общий тип для всех видов событий в Telegram. И с ним связаны две важных особенности в плане их обработки aiogram-ом:
# • Inner-мидлварь на Update вызывается всегда (т.е. в этом случае нет разницы между Outer и Inner).
# • Мидлвари на Update можно вешать только на диспетчер (корневой роутер).

# Каждая мидлварь, построенная на классах (мы не будем рассматривать иные варианты), должна реализовывать метод __call__() с тремя аргументами:
#
# handler — собственно, объект хэндлера, который будет выполнен.
#       Имеет смысл только для inner-мидлварей, т.к. outer-мидлварь ещё не знает, в какой хэндлер попадёт апдейт.
# event — тип Telegram-объекта, который обрабатываем.
#       Обычно это Update, Message, CallbackQuery или InlineQuery (но не только).
#       Если точно знаете, какого типа объекты обрабатываете, смело пишите, например, Message вместо TelegramObject.
# data — связанные с текущим апдейтом данные: FSM, переданные доп. поля из фильтров, флаги (о них позже) и т.д.
#       В этот же data мы можем класть из мидлварей какие-то свои данные, которые будут доступны в виде аргументов в хэндлерах (так же, как в фильтрах).


class SomeMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        print("Before handler")
        result = await handler(event, data)
        print("After handler")
        return result

# С телом функции ещё интереснее.
#
# Всё, что вы напишете ДО 28-й строки, будет выполнено до передачи управления нижестоящему обработчику (это может быть другая мидлварь или непосредственно хэндлер).
# Всё, что вы напишете ПОСЛЕ 28-й строки, будет выполнено уже после выхода из нижестоящего обработчика.
# Если вы хотите, чтобы обработка продолжилась, вы ОБЯЗАНЫ вызвать await handler(event, data). Если хотите «дропнуть» апдейт, просто не вызывайте его.
# Если вам не нужно получать данные из хэндлера, то последней строкой функции поставьте return await handler(event, data). Если не вернуть await handler(event, data) (неявный return None), то апдейт будет считаться «дропнутым».

# Все привычные нам объекты (Message, CallbackQuery и т.д.) являются апдейтами (Update),
# поэтому для Message сначала выполнятся мидлвари для Update, а уже затем для самого Message.
# Оставим на месте наши print() из примера выше и проследим, как будут выполняться мидлвари, если мы зарегистрируем по одной outer- и inner-мидлвари для типов Update и Message.


# Баним пользователей в боте
# Очень часто в группах по Telegram-ботам задают один и тот же вопрос: «а как банить пользователя в боте, чтобы тот не мог боту писать?».
# Скорее всего, лучшим местом для этого будет outer-мидлварь на Update, как самый ранний этап обработки запроса юзера.
# Более того, одна из встроенных в aiogram мидлварей кладёт в data словарик с информацией о пользователе по ключу event_from_user.
# Далее вы можете достать оттуда ID юзера, сравнить с каким-нибудь своим «списком заблокированных» и просто сделать return, чтобы предотвратить дальнейшую обработку по цепочке.

