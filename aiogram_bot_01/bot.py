# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ aiogram

from config_reader import config
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from random import randint
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from typing import Optional
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.callback_answer import CallbackAnswerMiddleware

# –õ–° ‚Äî –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞ —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –æ–¥–∏–Ω-–Ω–∞-–æ–¥–∏–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª.
# –ß–∞—Ç ‚Äî –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –õ–°, –≥—Ä—É–ø–ø, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤.
# –ê–ø–¥–µ–π—Ç ‚Äî –ª—é–±–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–ª–±—ç–∫, –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å, –ø–ª–∞—Ç—ë–∂, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Ç.–¥.
# –•—ç–Ω–¥–ª–µ—Ä ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞/—Ä–æ—É—Ç–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–π –∞–ø–¥–µ–π—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.
# –î–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî –æ–±—ä–µ–∫—Ç, –∑–∞–Ω–∏–º–∞—é—â–∏–π—Å—è –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–±–æ—Ä–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞.
# –í aiogram —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# –†–æ—É—Ç–µ—Ä ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É, –Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤. –ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç–µ—Ä.
# –§–∏–ª—å—Ç—Ä ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∏–ª–∏ False –∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ, –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Ö—ç–Ω–¥–ª–µ—Ä –∏–ª–∏ –Ω–µ—Ç.
# –ú–∏–¥–ª–≤–∞—Ä—å ‚Äî –ø—Ä–æ—Å–ª–æ–π–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª–∏–Ω–∏–≤–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ø–¥–µ–π—Ç–æ–≤.


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename="log.log", filemode="a")
# –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ç–∏–ø–æ–º Secret* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_secret_value(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–º–µ—Å—Ç–æ '*******'
# –ï—Å–ª–∏ –≤ –±–æ—Ç–µ –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø –ø—Ä—è–º–æ –≤ –æ–±—ä–µ–∫—Ç Bot,
# –∞ –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ —Ä–∞–∑–º–µ—Ç–æ–∫, —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ parse_mode=None:
# –Ω–∞–ø—Ä–∏–º–µ—Ä bot = Bot(token="123:abcxyz", parse_mode="HTML")
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode=None)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("Hello!")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message(Command("test2"))
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")


# –í–º–µ—Å—Ç–æ bot.send_message(...) –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å message.answer(...) –∏–ª–∏ message.reply(...).
# –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å chat_id, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    # answer –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")


@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    # reply –¥–µ–ª–∞–µ—Ç "–æ—Ç–≤–µ—Ç" –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ message
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')


# –ë–æ–ª–µ–µ —Ç–æ–≥–æ, –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∏–¥–∞ "answer_{type}" –∏–ª–∏ "reply_{type}", –Ω–∞–ø—Ä–∏–º–µ—Ä:
@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


# –í aiogram 3.x –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F. F.text
@dp.message(F.text, Command('test'))
# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä F.text, —Ç–æ —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é /test
async def any_message(message: Message):
    await message.answer("Hello, <b>world</b>!", parse_mode=ParseMode.HTML)
    await message.answer("Hello, *world*\!", parse_mode=ParseMode.MARKDOWN_V2)


# –ú–æ–∂–Ω–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏. –û–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.
@dp.message(Command("custom1", prefix="%"))
async def cmd_custom1(message: Message):
    await message.answer("–í–∏–∂—É –∫–æ–º–∞–Ω–¥—É!")


# –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤....vv...
@dp.message(Command("custom2", prefix="/!"))
async def cmd_custom2(message: Message):
    await message.answer("–ò —ç—Ç—É —Ç–æ–∂–µ –≤–∏–∂—É!")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ—à–µ–¥—à–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
# –£ —Ç–∞–∫–æ–≥–æ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç content_type —Ä–∞–≤–Ω—ã–π "new_chat_members", –Ω–æ –≤–æ–æ–±—â–µ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Message, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–µ –ø–æ–ª–µ.
@dp.message(F.new_chat_members)
async def somebody_added(message: Message):
    for user in message.new_chat_members:
        # –ø—Ä–æ–ø–µ—Ä—Ç–∏ full_name –±–µ—Ä—ë—Ç —Å—Ä–∞–∑—É –∏–º—è –ò —Ñ–∞–º–∏–ª–∏—é
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")


# –ö–ù–û–ü–ö–ò

# –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏¬∂
# –≠—Ç–æ—Ç –≤–∏–¥ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–µ —á—Ç–æ –∏–Ω–æ–µ, –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤).
# –ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ—Å—Ç–æ–π: —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ, —Ç–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç.
# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏, –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /ReplyKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
@dp.message(Command("ReplyKeyboard"))
async def cmd_start(message: types.Message):
    # –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è Bot API, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∫–Ω–æ–ø–æ–∫, –∞ –µ—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—â–µ, –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤.
    kb = [
        [types.KeyboardButton(text="–° –ø—é—Ä–µ—à–∫–æ–π"), types.KeyboardButton(text="–ë–µ–∑ –ø—é—Ä–µ—à–∫–∏")]
    ]
    # –î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫ –æ–±—ä–µ–∫—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä resize_keyboard=True
    # –ü–∞—Ä–∞–º–µ—Ç—Ä input_field_placeholder, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—Å—Ç –≤ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder='–ü–∏—Å–ê—Ç—å –Ω–∞–¥–æ –ó–î–ï–°–¨')
    await message.answer("–ö–∞–∫ –ø–æ–¥–∞–≤–∞—Ç—å –∫–æ—Ç–ª–µ—Ç—ã?", reply_markup=keyboard)


@dp.message(F.text.lower() == "—Å –ø—é—Ä–µ—à–∫–æ–π")
async def with_puree(message: types.Message):
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")
    # –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π ¬´—É–¥–∞–ª—è—é—â–µ–π¬ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–∏–ø–∞ ReplyKeyboardRemove.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=types.ReplyKeyboardRemove())


# Keyboard Builder
# ================
# –î–ª—è –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–±–æ—Ä—â–∏–∫–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä. –ù–∞–º –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
# add(<KeyboardButton>) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤ –ø–∞–º—è—Ç—å —Å–±–æ—Ä—â–∏–∫–∞;
# adjust(int1, int2, int3...) ‚Äî –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ int1, int2, int3... –∫–Ω–æ–ø–æ–∫;
# as_markup() ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã;
# button(<params>) ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ (Reply –∏–ª–∏ Inline) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–º–µ—Ä–æ–º 4√ó4:
@dp.message(Command("reply_builder"))
async def reply_builder(message: types.Message):
    builder = ReplyKeyboardBuilder()
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for i in range(1, 17):
        builder.add(types.KeyboardButton(text=str(i)))
    # –¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    builder.adjust(4, 6, 2, 4)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True),
    )

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏¬∂
# –í Telegram —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —à–µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –æ–±—ã—á–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
# –û–Ω–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è:
# –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏;
# –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞;
# —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞/–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã;
# –≤—ã–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏;
# –≤—ã–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö (—Å—É–ø–µ—Ä)–≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏;
# –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (WebApp).
@dp.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    # –º–µ—Ç–æ–¥ row –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥
    # –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä—è–¥
    # –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫...
    builder.row(
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    )
    # ... –≤—Ç–æ—Ä–æ–π –∏–∑ –æ–¥–Ω–æ–π ...
    builder.row(types.KeyboardButton(
        text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        request_poll=types.KeyboardButtonPollType(type="quiz"))
    )
    # ... –∞ —Ç—Ä–µ—Ç–∏–π —Å–Ω–æ–≤–∞ –∏–∑ –¥–≤—É—Ö
    builder.row(
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            request_user=types.KeyboardButtonRequestUser(
                request_id=1,
                user_is_premium=True
            )
        ),
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",
            request_chat=types.KeyboardButtonRequestChat(
                request_id=2,
                chat_is_channel=False,
                chat_is_forum=True
            )
        )
    )
    # WebApp-–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–æ—Ä—Ä–∏ :(

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )



# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
# =============
# –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –∏–Ω–ª–∞–π–Ω–æ–≤—ã–µ —Ü–µ–ø–ª—è—é—Ç—Å—è –Ω–µ –∫ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, —Å –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
# –í —ç—Ç–æ–π –≥–ª–∞–≤–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–≤–∞ —Ç–∏–ø–∞ —Ç–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫: URL –∏ Callback.
# –ï—â—ë –æ–¥–∏–Ω ‚Äî Switch ‚Äî –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –≥–ª–∞–≤–µ –ø—Ä–æ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º.

# URL-–∫–Ω–æ–ø–∫–∏
# –°–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–∏–ø—É URL, —Ç.–µ. ¬´—Å—Å—ã–ª–∫–∞¬ª. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã HTTP(S) –∏ tg://
@dp.message(Command("inline_url"))
async def cmd_inline_url(message: types.Message, bot: Bot):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="GitHub", url="https://github.com")
    )
    builder.row(types.InlineKeyboardButton(
        text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram",
        url="tg://resolve?domain=telegram")
    )

    # –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å ID-–∫–Ω–æ–ø–∫—É,
    # –£ —é–∑–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False —Ñ–ª–∞–≥ has_private_forwards
    # user_id = 1234567890
    # chat_info = await bot.get_chat(user_id)
    # if not chat_info.has_private_forwards:
    #     builder.row(types.InlineKeyboardButton(
    #         text="–ö–∞–∫–æ–π-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    #         url=f"tg://user?id={user_id}")
    #     )

    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É',
        reply_markup=builder.as_markup(),
    )


# –ö–æ–ª–±—ç–∫–∏¬∂
# Callback-–∫–Ω–æ–ø–∫–∏. –≠—Ç–æ –æ—á–µ–Ω—å –º–æ—â–Ω–∞—è —à—Ç—É–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ–∑–¥–µ.
# –°—É—Ç—å –≤ —á—ë–º: —É –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–æ–∫ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (data), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø–æ–∑–Ω–∞—ë—Ç,
# —á—Ç–æ –Ω–∞–∂–∞—Ç–æ –∏ —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å. –ò –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ data –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω!
# –°—Ç–æ–∏—Ç —Ç–∞–∫–∂–µ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–∫—É –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ,
# –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã –¥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ —Å—É–ø–µ—Ä–∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤.
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞ –Ω–∞ callback_query –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤.
# –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–¥–æ –Ω–∞ ¬´–∑–Ω–∞—á–µ–Ω–∏–µ¬ª –∫–Ω–æ–ø–∫–∏, —Ç.–µ. –Ω–∞ –µ—ë data:
# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞, —Ç–æ –ø–æ–ª–µ message —É –∫–æ–ª–±—ç–∫–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º.
# –£ –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–Ω–µ–µ –≥–¥–µ-—Ç–æ –µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
@dp.message(Command("random"))
async def cmd_random(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∂–º–∏ –º–µ–Ω—è",
        callback_data="random_value")
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
        reply_markup=builder.as_markup()
    )


@dp.message(Command("InlineKeyboardBuilder"))
async def inline_keyboard_builder(message: types.Message):
    builder = InlineKeyboardBuilder()
    # # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for i in range(1, 17):
        builder.add(types.InlineKeyboardButton(text=str(i), callback_data=str(i)))
    # –¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    builder.adjust(4, 6, 2, 4)
    # –ú–æ–∂–Ω–æ –ø–æ —Ä—è–¥–∞–º
    # builder.row(types.InlineKeyboardButton(text="–í–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞", callback_data="–í–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞"), types.InlineKeyboardButton(text="–í–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞", callback_data="–í–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞"))
    # builder.row(types.InlineKeyboardButton(text="–ù–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞", callback_data="–ù–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞"))
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=builder.as_markup(),
    )


# @router.message(
#     OrderFood.choosing_food_name,
#     F.text.in_(available_food_names)    -----  –≤ —Å–ø–∏—Å–∫–µ
# )

# –•—ç–Ω–¥–ª–µ—Ä. F.data - —Ñ–∏–ª—å—Ç—Ä
@dp.callback_query(F.data == "random_value")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(str(randint(1, 10)))
    # –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è "—á–∞—Å–∏–∫–æ–≤", –∏–Ω–∞—á–µ 30 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    # –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.answer(
        text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!",
        show_alert=True
    )
    # –Ω–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ answer() –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ await callback.answer()




# –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
# –¢.–∫. —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–Ω –æ—á–∏—Å—Ç–∏—Ç—Å—è
user_data = {}

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
            types.InlineKeyboardButton(text="+1", callback_data="num_incr")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard



# async def update_num_text(message: types.Message, new_value: int):
#     await message.edit_text(
#         f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
#         reply_markup=get_keyboard()
#     )
# –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –±–æ—Ç –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç
async def update_num_text(message: types.Message, new_value: int):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
            reply_markup=get_keyboard()
        )

@dp.message(Command("numbers"))
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard())


# —Ñ–∏–ª—å—Ç—Ä callback (–Ω–∞—á–∞–ª–æ —Å ...). –£–¥–æ–±–Ω–æ!
@dp.callback_query(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery):
    user_value = user_data.get(callback.from_user.id, 0)
    # —Ä–∞–∑–±–æ—Ä callback
    action = callback.data.split("_")[1]
    if action == "incr":
        user_data[callback.from_user.id] = user_value+1
        await update_num_text(callback.message, user_value+1)
    elif action == "decr":
        user_data[callback.from_user.id] = user_value-1
        await update_num_text(callback.message, user_value-1)
    elif action == "finish":
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")

    await callback.answer()




# –§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
# ================
# –í –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–∫–∏—Ö callback data, –∏ –≤ aiogram –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ!
# –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ CallbackData, —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å, –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∞ –¥–∞–ª—å—à–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
# —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–ª–±—ç–∫–∞ –∏, —á—Ç–æ –≤–∞–∂–Ω–µ–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
# –°–Ω–æ–≤–∞ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ; —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å NumbersCallbackFactory —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º fabnum –∏ –¥–≤—É–º—è –ø–æ–ª—è–º–∏ action –∏ value.
# –ü–æ–ª–µ action –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (change) –∏–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å (finish), –∞ –ø–æ–ª–µ value –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ –±—É–¥–µ—Ç None, —Ç.–∫. –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è "finish" –¥–µ–ª—å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
# –ù–∞—à –∫–ª–∞—Å—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç CallbackData –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞.
# –ü—Ä–µ—Ñ–∏–∫—Å ‚Äî —ç—Ç–æ –æ–±—â–∞—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–µ–∂–∏—Ç –≤ –∫–æ–ª–±—ç–∫–µ.
class NumbersCallbackFactory(CallbackData, prefix="fabnum"):
    action: str
    # –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —Ç–∏–ø value (str, int, float)
    value: Optional[int] = None

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
# –ó–¥–µ—Å—å –Ω–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –º–µ—Ç–æ–¥ button(), –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º —Ç–∏–ø–æ–º,
# –∞ –æ—Ç –Ω–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
# –í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ callback_data –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ NumbersCallbackFactory:
def get_keyboard_fab():
    builder = InlineKeyboardBuilder()
    builder.button(
        text="-2", callback_data=NumbersCallbackFactory(action="change", value=-2)
    )
    builder.button(
        text="-1", callback_data=NumbersCallbackFactory(action="change", value=-1)
    )
    builder.button(
        text="+1", callback_data=NumbersCallbackFactory(action="change", value=1)
    )
    builder.button(
        text="+2", callback_data=NumbersCallbackFactory(action="change", value=None)
    )
    builder.button(
        text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=NumbersCallbackFactory(action="finish")
    )
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏–ª–æ—Å—å 4 + 1
    builder.adjust(4)
    return builder.as_markup()


@dp.message(Command("numbers_fab"))
async def cmd_numbers_fab(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=get_keyboard_fab())


# –ù–∞–∫–æ–Ω–µ—Ü, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–æ–≤.
# –î–ª—è —ç—Ç–æ–≥–æ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞—Å—Å, –∫–æ–ª–±—ç–∫–∏ —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã –ª–æ–≤–∏–º, —Å –≤—ã–∑–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º filter().
# –¢–∞–∫–∂–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º callback_data (–∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–º!), –∏ –∏–º–µ—é—â–∏–º —Ç–æ—Ç –∂–µ —Ç–∏–ø, —á—Ç–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º—ã–π –∫–ª–∞—Å—Å:
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö action callback_data –∫–ª–∞—Å—Å–∞ NumbersCallbackFactory (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
# @dp.callback_query(NumbersCallbackFactory.filter())
# async def callbacks_num_change_fab(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
#     # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
#     if callback_data.action == "change":
#         await callback.message.answer(f'{callback_data.action=} _ {callback_data.value=}')
#     # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω—É–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å
#     else:
#         await callback.message.edit_text(f'{callback_data.action=} _ no value')
#     await callback.answer()


# –ï—â—ë –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏ —Å–¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.
# –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –±—É–¥–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é action –∏ –≤ —ç—Ç–æ–º –Ω–∞–º –ø–æ–º–æ–≥—É—Ç Magic Filter aiogram 3.x.
# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: -2, -1, +1, +2
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ action –ø–æ —Ñ–∏–ª—å—Ç—Ä—É callback_data –∫–ª–∞—Å—Å–∞ NumbersCallbackFactory (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
@dp.callback_query(NumbersCallbackFactory.filter(F.action == "change"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: NumbersCallbackFactory
):
    await callback.message.answer(f'{callback_data.action=} _ {callback_data.value=}')
    await callback.answer()


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@dp.callback_query(NumbersCallbackFactory.filter(F.action == "finish"))
async def callbacks_num_finish_fab(callback: types.CallbackQuery):
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await callback.message.edit_text(f'Finish')
    await callback.answer()


# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫–∏
# –ï—Å–ª–∏ —É –≤–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∫–æ–ª–±—ç–∫-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å, –ª–∏–±–æ –æ—Ç–≤–µ—á–∞—Ç—å –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ, –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏–¥–ª–≤–∞—Ä—å—é.
# –í —Ü–µ–ª–æ–º –ø—Ä–æ —Ç–∞–∫–æ–µ –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.
# –ò—Ç–∞–∫, —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Ç —Ç–∞–∫—É—é —Å—Ç—Ä–æ—á–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:
# dp.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text="–ì–æ—Ç–æ–≤–æ!", show_alert=True))

# –£–≤—ã, —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–∞ –≤—Å–µ –∫–æ–ª–±—ç–∫-—Ö—ç–Ω–¥–ª–µ—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –¥–æ–≤–æ–ª—å–Ω–æ —Ä–µ–¥–∫–∏.
# –ö —Å—á–∞—Å—Ç—å—é, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–∏–¥–ª–≤–∞—Ä–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç callback_answer –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:



# =======================================================
# –†–æ—É—Ç–µ—Ä—ã, –º–Ω–æ–≥–æ—Ñ–∞–π–ª–æ–≤–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞










# –î–ª—è –ì–æ—Ä–±—É—à–∫–∏

# TODO –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–µ–∫—Å—Ç "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è Bot API, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –∫–Ω–æ–ø–æ–∫, –∞ –µ—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—â–µ, –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤.
    kb = [
        [types.KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ]
    # –î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫ –æ–±—ä–µ–∫—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä resize_keyboard=True
    # –ü–∞—Ä–∞–º–µ—Ç—Ä input_field_placeholder, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—Å—Ç –≤ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder='–ü–∏—Å–ê—Ç—å –Ω–∞–¥–æ –ó–î–ï–°–¨')
    await message.answer("–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", reply_markup=keyboard)


def get_inline_keyboard(text_callback: dict) -> types.InlineKeyboardMarkup:
    buttons = []
    for keys, value in text_callback.items():
        buttons.append([types.InlineKeyboardButton(text=keys, callback_data=value)])
        # print(keys, value)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@dp.message(F.text.lower() == "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def text_one(message: types.Message):
    # TODO –ó–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –ø–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ—Ç–æ–º —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å.
    text_callback = {
        "–¢–µ–ª–µ—Ñ–æ–Ω—ã": "cat_phone",
        "–ü–ª–∞–Ω—à–µ—Ç—ã": "cat_laptop",
        "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã": "cat_tv"
    }
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_inline_keyboard(text_callback))


# –•—ç–Ω–¥–ª–µ—Ä. F.data - —Ñ–∏–ª—å—Ç—Ä
# @dp.callback_query(F.data == "cat_phone")
# async def send_cat_phone(callback: types.CallbackQuery):
#     await callback.message.answer(callback.data)



# –•—ç–Ω–¥–ª–µ—Ä. F.data - —Ñ–∏–ª—å—Ç—Ä
@dp.callback_query(F.data.startswith("cat_"))
async def send_vendors(callback: types.CallbackQuery):
    category = callback.data.split("_")[1]
    if category == "phone":
        # TODO –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - action (—Å–ø–∏—Å–æ–∫ vendor). –ü–æ—Ç–æ–º —Å–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å.
        text_callback = {
            "Apple": f"ven_apple_{category}",
            "Samsung": f"ven_samsung_{category}",
            "Xiaomi": f"ven_xiaomi_{category}"
        }
    elif category == "laptop":
        text_callback = {
            "–ü–ª–∞–Ω—à–µ—Ç_1": f"ven_pl1_{category}",
            "–ü–ª–∞–Ω—à–µ—Ç_2": f"ven_pl2_{category}",
            "–ü–ª–∞–Ω—à–µ—Ç_3": f"ven_pl3_{category}",
        }
    elif category == "tv":
        text_callback = {
            "–¢–í_1": f"ven_tv1_{category}",
            "–¢–í_2": f"ven_tv2_{category}",
            "–¢–í_3": f"ven_tv3_{category}",
        }

    # print(text_callback)

    await callback.message.answer("–í–µ–Ω–¥–æ—Ä—ã:", reply_markup=get_inline_keyboard(text_callback))

    # –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è "—á–∞—Å–∏–∫–æ–≤", –∏–Ω–∞—á–µ 30 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    # –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    # await callback.answer(
    #     text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!",
    #     show_alert=True
    # )


# –•—ç–Ω–¥–ª–µ—Ä. F.data - —Ñ–∏–ª—å—Ç—Ä
@dp.callback_query(F.data.startswith("ven_"))
async def send_descriptions(callback: types.CallbackQuery):
    vendor = callback.data.split("_")[1]
    category = callback.data.split("_")[2]
    # TODO –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É vendor - action –∏ category (—Å–ø–∏—Å–æ–∫ descriptions –∏ —Ü–µ–Ω). –ü–æ—Ç–æ–º —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    descr_list = [f"{category} {vendor}"]
    if vendor == "apple":
        descr_list.append("apple_1")
        descr_list.append("apple_2")
        descr_list.append("apple_3")
    elif vendor == "samsung":
        descr_list.append("samsung_1")
        descr_list.append("samsung_2")
        descr_list.append("samsung_3")
    elif vendor == "xiaomi":
        descr_list.append("xiaomi_1")
        descr_list.append("xiaomi_2")
        descr_list.append("xiaomi_3")
    answer_message = "\n".join(descr_list)

    await callback.message.answer(answer_message)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
# –ò–Ω–æ–≥–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
# –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–ø–∏—Å–æ–∫ —á–µ–≥–æ-—Ç–æ, –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –µ—â—ë.
# –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ (kwargs) –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –ª–∏–±–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º.
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# dp = Dispatcher()
# dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")
# –∏–ª–∏:
# await dp.start_polling(bot, mylist=[1, 2, 3])
# –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é started_at –∏ —Å–ø–∏—Å–æ–∫ mylist –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å –∏ –ø–∏—Å–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö.
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())


